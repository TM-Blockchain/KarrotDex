#[derive(Accounts)]
pub struct Redeem<'info> {
    #[account(mut)]
    pub vault: Account<'info, TokenAccount>,
    #[account(mut)]
    pub user: Account<'info, TokenAccount>,
    pub authority: Signer<'info>,
    // Add proof verification account constraints here
}

pub fn redeem(ctx: Context<Redeem>, symbol: String, user: Pubkey, amount: u64, burn_id: [u8; 32], proof: Vec<u8>) -> Result<()> {
    require!(!proof_registry.contains(&burn_id), ErrorCode::DuplicateProof);
    verify_burn_proof(proof)?;

    proof_registry.insert(burn_id);

    // Transfer from vault to user
    let cpi_ctx = CpiContext::new(...);
    token::transfer(cpi_ctx, amount)?;

    Ok(())
}
