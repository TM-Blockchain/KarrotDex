// ui/tokenUI.js

import { state } from '../state.js';

// Token data per aggregator
export const aggregatorTokens = {
  PulseX: [
    { address: '0x6b17...0001', label: 'DAI', logo: 'img/dai.png' },
    { address: '0x6910...0002', label: 'KARROT', logo: 'img/karrot-hex.jpg' }
  ],
  Ray: [
    { address: '0x5d3a5...0003', label: 'MXDAI', logo: 'img/mxdai.png' },
    { address: '0x4fabb...0004', label: 'USDT', logo: 'img/usdt.png' }
  ],
  ZK: [
    { address: '0xabc1...0005', label: 'ZKToken', logo: 'img/zk-token.png' },
    { address: '0xabc2...0006', label: 'ZKUSD', logo: 'img/zkusd.png' }
  ]
};

// Default token selections
export const DEFAULTS = {
  PulseX: { from: '0x6b17...0001', to: '0x6910...0002' },
  Ray: { from: '0x5d3a5...0003', to: '0x4fabb...0004' },
  ZK: { from: '0xabc1...0005', to: '0xabc2...0006' }
};

// Populate dropdowns with tokens
export function populateTokens() {
  const tf = document.getElementById('tokenFrom');
  const tt = document.getElementById('tokenTo');
  const fromIcon = document.getElementById('fromIcon');
  const toIcon = document.getElementById('toIcon');

  const tokens = aggregatorTokens[state.selectedAggregator] || [];

  tf.innerHTML = '';
  tt.innerHTML = '';

  tokens.forEach(t => {
    tf.add(new Option(t.label, t.address.toLowerCase()));
    tt.add(new Option(t.label, t.address.toLowerCase()));
  });

  const defaults = DEFAULTS[state.selectedAggregator];
  if (defaults) {
    tf.value = defaults.from.toLowerCase();
    tt.value = defaults.to.toLowerCase();
  } else {
    tf.selectedIndex = 0;
    tt.selectedIndex = tf.options.length > 1 ? 1 : 0;
  }

  updateIcons();
}

// Update icons for selected tokens
export function updateIcons() {
  const tf = document.getElementById('tokenFrom');
  const tt = document.getElementById('tokenTo');
  const fromIcon = document.getElementById('fromIcon');
  const toIcon = document.getElementById('toIcon');

  const tokens = aggregatorTokens[state.selectedAggregator] || [];
  const fromMeta = tokens.find(t => t.address.toLowerCase() === tf.value.toLowerCase());
  const toMeta = tokens.find(t => t.address.toLowerCase() === tt.value.toLowerCase());

  fromIcon.src = fromMeta?.logo || 'img/default-token.png';
  toIcon.src = toMeta?.logo || 'img/default-token.png';

  fromIcon.onerror = () => { fromIcon.src = 'img/default-token.png'; };
  toIcon.onerror = () => { toIcon.src = 'img/default-token.png'; };
}
