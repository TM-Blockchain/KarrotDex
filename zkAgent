import * as fs from "fs";
import * as path from "path";
import * as snarkjs from "snarkjs";
import { AnchorProvider, Program, web3, utils } from "@project-serum/anchor";
import { YourAnchorProgram } from "../target/types/your_anchor_program";

async function generateZkProof(user: string, amount: string, burnId: string, leaf: string) {
  const circuitWasm = path.join(__dirname, "../circuits/burn_proof.wasm");
  const zkey = path.join(__dirname, "../circuits/burn_proof_final.zkey");

  const input = {
    user: BigInt(user).toString(),
    amount,
    burnId,
    leaf,
  };

  const { proof, publicSignals } = await snarkjs.groth16.fullProve(
    input,
    circuitWasm,
    zkey
  );

  console.log("Public Signals:", publicSignals);
  return { proof, publicSignals };
}

async function submitUnlockWithZk({
  userPubkey,
  vaultPda,
  userAta,
  amount,
  burnIdHex,
  leafHex,
  programId,
  walletKeypair,
}: {
  userPubkey: web3.PublicKey;
  vaultPda: web3.PublicKey;
  userAta: web3.PublicKey;
  amount: number;
  burnIdHex: string;
  leafHex: string;
  programId: web3.PublicKey;
  walletKeypair: web3.Keypair;
}) {
  const provider = new AnchorProvider(
    web3.clusterApiUrl("mainnet-beta"),
    walletKeypair,
    {}
  );
  const program = new Program(
    YourAnchorProgram,
    programId,
    provider
  );

  // Generate ZK proof
  const { proof, publicSignals } = await generateZkProof(
      userPubkey.toString(),
      amount.toString(),
      burnIdHex,
      leafHex
  );

  // Prepare inputs
  const proofArgs = utils.bytes.bs58.encode(Buffer.from(JSON.stringify(proof)));
  const publicInput = publicSignals[0]; // adjust to your circuit

  const tx = await program.methods
    .unlockWithZk(
      new web3.PublicKey(userPubkey),
      new anchor.BN(amount),
      Buffer.from(burnIdHex, "hex"),
      Buffer.from(proofArgs, "base64"), 
      new anchor.BN(publicInput)
    )
    .accounts({
      vault: vaultPda,
      processed: vaultPda,     // or whatever processed state account is
      pdaSigner: vaultPda,     // PDA authority
      userAta,
      tokenProgram: web3.TokenInstructions.TOKEN_PROGRAM_ID,
    })
    .rpc();

  console.log("zk Unlock transaction:", tx);
}

// Example invocation
(async () => {
  const user = web3.Keypair.generate();
  const wallet = user; // act as agent
  const vaultPda = user.publicKey; // update
  const userAta = user.publicKey; // update
  const programId = new web3.PublicKey("YourAnchorProgramID");
  const amount = 1000;
  const burnIdHex = "abcdef..."; // 32 byte hex
  const leafHex = "123456...";  // as per circuit spec

  await submitUnlockWithZk({
    userPubkey: user.publicKey,
    vaultPda,
    userAta,
    amount,
    burnIdHex,
    leafHex,
    programId,
    walletKeypair: wallet,
  });
})();
