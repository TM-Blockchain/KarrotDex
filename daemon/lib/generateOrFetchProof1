import { Connection, PublicKey } from "@solana/web3.js";
import { ethers } from "ethers";
import { generateOrFetchProof, parseLockEvent } from "../lib/solana"; // import your lib helpers

export async function startSolanaBridgeDaemon() {
  // ----- Solana Setup -----
  const SOL_RPC = process.env.SOL_RPC!;
  const SOL_WSS = process.env.SOL_WSS!;
  const ESCROW_PROGRAM_ID = new PublicKey(process.env.ESCROW_PROGRAM_ID!);

  const solConn = new Connection(SOL_RPC, { wsEndpoint: SOL_WSS });

  // ----- PulseChain Setup -----
  const pulseRpc = new ethers.providers.JsonRpcProvider(process.env.PULSE_RPC);
  const minter = new ethers.Contract(
    process.env.MINTER_ADDRESS!,
    ["function mintFromLockProof(string, address, uint256, bytes)"],
    new ethers.Wallet(process.env.PRIVATE_KEY!, pulseRpc)
  );

  // Local state to avoid replay
  const seenProofs = new Set<string>();

  console.log("Sigma Daemon: listening for AssetLocked logs...");

  solConn.onLogs(
    ESCROW_PROGRAM_ID,
    async (logs, ctx) => {
      try {
        const lockProof = generateOrFetchProof(logs);
        const proofHash = ethers.utils.keccak256(lockProof);

        if (seenProofs.has(proofHash)) return;
        seenProofs.add(proofHash);

        const { user, symbol, amount } = parseLockEvent(logs);

        console.log(`Minting ${symbol} to ${user}, amount: ${amount.toString()}`);

        const tx = await minter.mintFromLockProof(symbol, user, amount, lockProof);

        await tx.wait();
        console.log("Mint success:", tx.hash);
      } catch (err) {
        console.error("Sigma Daemon Error:", err);
      }
    },
    "confirmed"
  );
}
